{"version":3,"file":"app.js","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"app\"] = factory();\n\telse\n\t\troot[\"app\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dev/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Author: Michael Hadley, mikewesthad.com\n * Asset Credits:\n *  - Tuxemon, https://github.com/Tuxemon/Tuxemon\n */\nconst config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: 'game-container',\n  pixelArt: true,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: {\n        y: 0\n      }\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\nconst game = new Phaser.Game(config);\nlet cursors;\nlet player;\nlet showDebug = false;\n\nfunction preload() {\n  this.load.image('tiles', './assets/magecity.png');\n  this.load.tilemapTiledJSON('map', './assets/mage-map.json'); // An atlas is a way to pack multiple images together into one texture. I'm using it to load all\n  // the player animations (walking left, walking right, etc.) in one image. For more info see:\n  //  https://labs.phaser.io/view.html?src=src/animation/texture%20atlas%20animation.js\n  // If you don't use an atlas, you can do the same thing with a spritesheet, see:\n  //  https://labs.phaser.io/view.html?src=src/animation/single%20sprite%20sheet.js\n\n  this.load.atlas('atlas', 'https://www.mikewesthad.com/phaser-3-tilemap-blog-posts/post-1/assets/atlas/atlas.png', 'https://www.mikewesthad.com/phaser-3-tilemap-blog-posts/post-1/assets/atlas/atlas.json');\n}\n\nfunction create() {\n  const map = this.make.tilemap({\n    key: 'map'\n  }); // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in\n  // Phaser's cache (i.e. the name you used in preload)\n\n  const tileset = map.addTilesetImage('mage-tileset', 'tiles'); // Parameters: layer name (or index) from Tiled, tileset, x, y\n\n  const belowLayer = map.createStaticLayer('Below Player', tileset, 0, 0);\n  const worldLayer = map.createStaticLayer('World', tileset, 0, 0);\n  const aboveLayer = map.createStaticLayer('Above Player', tileset, 0, 0);\n  worldLayer.setCollisionByProperty({\n    collides: true\n  }); // By default, everything gets depth sorted on the screen in the order we created things. Here, we\n  // want the \"Above Player\" layer to sit on top of the player, so we explicitly give it a depth.\n  // Higher depths will sit on top of lower depth objects.\n\n  aboveLayer.setDepth(10); // Object layers in Tiled let you embed extra info into a map - like a spawn point or custom\n  // collision shapes. In the tmx file, there's an object layer with a point named \"Spawn Point\"\n\n  const spawnPoint = map.findObject('Objects', obj => obj.name === 'Spawn Point'); // Create a sprite with physics enabled via the physics system. The image used for the sprite has\n  // a bit of whitespace, so I'm using setSize & setOffset to control the size of the player's body.\n\n  player = this.physics.add.sprite(spawnPoint.x, spawnPoint.y, 'atlas', 'misa-front').setSize(30, 40).setOffset(0, 24); // Watch the player and worldLayer for collisions, for the duration of the scene:\n\n  this.physics.add.collider(player, worldLayer); // Create the player's walking animations from the texture atlas. These are stored in the global\n  // animation manager so any sprite can access them.\n\n  const anims = this.anims;\n  anims.create({\n    key: 'misa-left-walk',\n    frames: anims.generateFrameNames('atlas', {\n      prefix: 'misa-left-walk.',\n      start: 0,\n      end: 3,\n      zeroPad: 3\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  anims.create({\n    key: 'misa-right-walk',\n    frames: anims.generateFrameNames('atlas', {\n      prefix: 'misa-right-walk.',\n      start: 0,\n      end: 3,\n      zeroPad: 3\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  anims.create({\n    key: 'misa-front-walk',\n    frames: anims.generateFrameNames('atlas', {\n      prefix: 'misa-front-walk.',\n      start: 0,\n      end: 3,\n      zeroPad: 3\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  anims.create({\n    key: 'misa-back-walk',\n    frames: anims.generateFrameNames('atlas', {\n      prefix: 'misa-back-walk.',\n      start: 0,\n      end: 3,\n      zeroPad: 3\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  anims.create({\n    key: 'misa-back-walk',\n    frames: anims.generateFrameNames('atlas', {\n      prefix: 'misa-back-walk.',\n      start: 0,\n      end: 1,\n      zeroPad: 1\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  const camera = this.cameras.main;\n  camera.startFollow(player);\n  camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n  cursors = this.input.keyboard.createCursorKeys(); // Help text that has a \"fixed\" position on the screen\n  // Debug graphics\n\n  this.input.keyboard.once('keydown_F', event => {\n    // Turn on physics debugging to show player's hitbox\n    this.physics.world.createDebugGraphic(); // Create worldLayer collision graphic above the player, but below the help text\n\n    const graphics = this.add.graphics().setAlpha(0.75).setDepth(20);\n    worldLayer.renderDebug(graphics, {\n      tileColor: null,\n      // Color of non-colliding tiles\n      collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n      // Color of colliding tiles\n      faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges\n\n    });\n  });\n}\n\nfunction update(time, delta) {\n  let speed = 200;\n  coolingDown = false;\n  const prevVelocity = player.body.velocity.clone(); // Stop any previous movement from the last frame\n\n  player.body.setVelocity(0); // Horizontal movement\n\n  if (cursors.left.isDown) {\n    if (cursors.space.isDown) {\n      speed = 400;\n      player.body.setVelocityX(-speed);\n    }\n\n    player.body.setVelocityX(-speed);\n  } else if (cursors.right.isDown) {\n    if (cursors.space.isDown) {\n      speed = 400;\n      player.body.setVelocityX(speed);\n    }\n\n    player.body.setVelocityX(speed);\n  } // Vertical movement\n\n\n  if (cursors.up.isDown) {\n    if (cursors.space.isDown) {\n      speed = 400;\n      player.body.setVelocityY(-speed);\n    }\n\n    player.body.setVelocityY(-speed);\n  } else if (cursors.down.isDown) {\n    if (cursors.space.isDown) {\n      speed = 400;\n      player.body.setVelocityY(speed);\n    }\n\n    player.body.setVelocityY(speed);\n  } // Normalize and scale the velocity so that player can't move faster along a diagonal\n\n\n  player.body.velocity.normalize().scale(speed); // Update the animation last and give left/right animations precedence over up/down animations\n\n  if (cursors.left.isDown) {\n    player.anims.play('misa-left-walk', true);\n  } else if (cursors.right.isDown) {\n    player.anims.play('misa-right-walk', true);\n  } else if (cursors.up.isDown) {\n    player.anims.play('misa-back-walk', true);\n  } else if (cursors.down.isDown) {\n    player.anims.play('misa-front-walk', true);\n  } else {\n    player.anims.stop(); // If we were moving, pick and idle frame to use\n\n    if (prevVelocity.x < 0) player.setTexture('atlas', 'misa-left');else if (prevVelocity.x > 0) player.setTexture('atlas', 'misa-right');else if (prevVelocity.y < 0) player.setTexture('atlas', 'misa-back');else if (prevVelocity.y > 0) player.setTexture('atlas', 'misa-front');\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClsourceRoot":""}