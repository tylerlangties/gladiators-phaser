{"version":3,"file":"app.js","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/main.js","webpack://[name]/./src/player.js","webpack://[name]/./src/scenes/townScene.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"app\"] = factory();\n\telse\n\t\troot[\"app\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dev/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import TownScene from './scenes/townScene.js';\nconst config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: 'game-container',\n  pixelArt: true,\n  scene: TownScene,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: {\n        y: 0\n      }\n    }\n  }\n};\nconst game = new Phaser.Game(config); // const config = {\n//   type: Phaser.AUTO,\n//   width: 800,\n//   height: 600,\n//   parent: 'game-container',\n//   pixelArt: true,\n//   physics: {\n//     default: 'arcade',\n//     arcade: {\n//       gravity: { y: 0 }\n//     }\n//   },\n//   scene: {\n//     preload: preload,\n//     create: create,\n//     update: update\n//   }\n// };\n// const game = new Phaser.Game(config);\n// let cursors;\n// let player;\n// let showDebug = false;\n// function preload() {\n//   this.load.image('tiles', './assets/magecity.png');\n//   this.load.tilemapTiledJSON('map', './assets/mage-map.json');\n//   this.load.atlas(\n//     'weapon',\n//     '../assets/weapon-anims.png',\n//     '../assets/weapon-anims.json'\n//   );\n//   // An atlas is a way to pack multiple images together into one texture. I'm using it to load all\n//   // the player animations (walking left, walking right, etc.) in one image. For more info see:\n//   //  https://labs.phaser.io/view.html?src=src/animation/texture%20atlas%20animation.js\n//   // If you don't use an atlas, you can do the same thing with a spritesheet, see:\n//   //  https://labs.phaser.io/view.html?src=src/animation/single%20sprite%20sheet.js\n//   this.load.atlas(\n//     'atlas',\n//     '../assets/player-anim.png',\n//     '../assets/player-anim.json'\n//   );\n// }\n// function create() {\n//   const map = this.make.tilemap({ key: 'map' });\n//   // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in\n//   // Phaser's cache (i.e. the name you used in preload)\n//   const tileset = map.addTilesetImage('mage-tileset', 'tiles');\n//   // Parameters: layer name (or index) from Tiled, tileset, x, y\n//   const belowLayer = map.createStaticLayer('Below Player', tileset, 0, 0);\n//   const worldLayer = map.createStaticLayer('World', tileset, 0, 0);\n//   const aboveLayer = map.createStaticLayer('Above Player', tileset, 0, 0);\n//   worldLayer.setCollisionByProperty({ collides: true });\n//   // By default, everything gets depth sorted on the screen in the order we created things. Here, we\n//   // want the \"Above Player\" layer to sit on top of the player, so we explicitly give it a depth.\n//   // Higher depths will sit on top of lower depth objects.\n//   aboveLayer.setDepth(10);\n//   // Object layers in Tiled let you embed extra info into a map - like a spawn point or custom\n//   // collision shapes. In the tmx file, there's an object layer with a point named \"Spawn Point\"\n//   const spawnPoint = map.findObject(\n//     'Objects',\n//     obj => obj.name === 'Spawn Point'\n//   );\n//   // Create a sprite with physics enabled via the physics system. The image used for the sprite has\n//   // a bit of whitespace, so I'm using setSize & setOffset to control the size of the player's body.\n//   player = this.physics.add\n//     .sprite(spawnPoint.x, spawnPoint.y, 'atlas', 'Character_Down.000.png')\n//     .setSize(32, 32);\n//   weapon = this.physics.add\n//     .sprite(player.x, player.y, 'weapon', 'Sword_UpRight-3.png')\n//     .setSize(32, 32)\n//     .setOffset(0, -15);\n//   weapon.visible = false;\n//   //play invisible frame first\n//   // player.addChild(weapon);\n//   // Watch the player and worldLayer for collisions, for the duration of the scene:\n//   this.physics.add.collider(player, worldLayer);\n//   // Create the player's walking animations from the texture atlas. These are stored in the global\n//   // animation manager so any sprite can access them.\n//   const anims = this.anims;\n//   anims.create({\n//     key: 'SlashAnim',\n//     frames: anims.generateFrameNames('weapon', {\n//       prefix: 'Sword_UpRight-',\n//       start: 0,\n//       end: 3,\n//       zeroPad: 0,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: 0\n//   });\n//   anims.create({\n//     key: 'character-walk-down',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_Down.',\n//       start: 0,\n//       end: 3,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-walk-left',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_Left.',\n//       start: 0,\n//       end: 3,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-walk-up',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_Up.',\n//       start: 0,\n//       end: 3,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-walk-right',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_Right.',\n//       start: 0,\n//       end: 3,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-slash-left',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_SlashUpLeft.',\n//       start: 0,\n//       end: 4,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-slash-right',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_SlashDownRight.',\n//       start: 0,\n//       end: 4,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-slash-down',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_SlashDownLeft.',\n//       start: 0,\n//       end: 4,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   anims.create({\n//     key: 'character-slash-up',\n//     frames: anims.generateFrameNames('atlas', {\n//       prefix: 'Character_SlashUpRight.',\n//       start: 0,\n//       end: 4,\n//       zeroPad: 3,\n//       suffix: '.png'\n//     }),\n//     frameRate: 10,\n//     repeat: -1\n//   });\n//   // anims.create({\n//   //   key: 'misa-back-walk',\n//   //   frames: anims.generateFrameNames('atlas', {\n//   //     prefix: 'misa-back-walk.',\n//   //     start: 0,\n//   //     end: 1,\n//   //     zeroPad: 1\n//   //   }),\n//   //   frameRate: 10,\n//   //   repeat: -1\n//   // });\n//   const camera = this.cameras.main;\n//   camera.startFollow(player);\n//   camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n//   cursors = this.input.keyboard.createCursorKeys();\n//   // Help text that has a \"fixed\" position on the screen\n// // Debug graphics\n// this.input.keyboard.once('keydown_F', event => {\n//   // Turn on physics debugging to show player's hitbox\n//   this.physics.world.createDebugGraphic();\n//   console.log(game);\n//   // Create worldLayer collision graphic above the player, but below the help text\n//   const graphics = this.add\n//     .graphics()\n//     .setAlpha(0.75)\n//     .setDepth(20);\n//   worldLayer.renderDebug(graphics, {\n//     tileColor: null, // Color of non-colliding tiles\n//     collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255), // Color of colliding tiles\n//     faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges\n//   });\n// });\n// }\n// function update(time, delta) {\n//   let speed = 200;\n//   const prevVelocity = player.body.velocity.clone();\n//   // console.log(player);\n//   // Stop any previous movement from the last frame\n//   player.body.setVelocity(0);\n//   weapon.body.setVelocity(0);\n//   player.depth = 1;\n//   weapon.x = player.x;\n//   weapon.y = player.y - 10;\n//   weapon.depth = 0;\n//   // Horizontal movement\n//   if (cursors.left.isDown) {\n//     // if (cursors.space.isDown) {\n//     //   speed = 400;\n//     //   player.body.setVelocityX(-speed);\n//     // }\n//     player.body.setVelocityX(-speed);\n//     weapon.body.setVelocityX(-speed);\n//   } else if (cursors.right.isDown) {\n//     // if (cursors.space.isDown) {\n//     //   speed = 400;\n//     //   player.body.setVelocityX(speed);\n//     // }\n//     player.body.setVelocityX(speed);\n//     weapon.body.setVelocityX(speed);\n//   }\n//   // Vertical movement\n//   if (cursors.up.isDown) {\n//     // if (cursors.space.isDown) {\n//     //   speed = 400;\n//     //   player.body.setVelocityY(-speed);\n//     // }\n//     player.body.setVelocityY(-speed);\n//     weapon.body.setVelocityY(-speed);\n//   } else if (cursors.down.isDown) {\n//     // if (cursors.space.isDown) {\n//     //   speed = 400;\n//     //   player.body.setVelocityY(speed);\n//     // }\n//     player.body.setVelocityY(speed);\n//     weapon.body.setVelocityY(speed);\n//   }\n//   // Normalize and scale the velocity so that player can't move faster along a diagonal\n//   player.body.velocity.normalize().scale(speed);\n//   weapon.body.velocity.normalize().scale(speed);\n//   function attack() {\n//     // if (!weapon.anims.currentFrame.index === 4) {\n//     weapon.visible = true;\n//     player.anims.play('character-slash-up', true);\n//     weapon.anims.play('SlashAnim', true);\n//     console.log(weapon);\n//     weapon.anims.currentAnim.hideOnComplete = true;\n//     player.anims.currentAnim.hideOnComplete = true;\n//     // console.log(game.input.keyboard);\n//     // weapon.anims.destroy();\n//     // this.physics.add.existing\n//     //   .sprite(player.x, player.y, 'weapon', 'Sword_UpRight-3.png')\n//     //   .setSize(32, 32)\n//     //   .setOffset(0, -15);\n//     // weapon = new Sprite(\n//     //   game.scene,\n//     //   player.x,\n//     //   player.y,\n//     //   'weapon',\n//     //   'Sword_UpRight-3.png'\n//     // );\n//     // }\n//   }\n//   // Update the animation last and give left/right animations precedence over up/down animations\n//   if (cursors.space.isDown && player.body.facing === 13) {\n//     player.anims.play('character-slash-left', true);\n//   } else if (cursors.space.isDown && player.body.facing === 14) {\n//     player.anims.play('character-slash-right', true);\n//   } else if (cursors.space.isDown && player.body.facing === 11) {\n//     attack();\n//   } else if (cursors.space.isDown && player.body.facing === 12) {\n//     player.anims.play('character-slash-down', true);\n//   } else if (cursors.left.isDown) {\n//     player.anims.play('character-walk-left', true);\n//   } else if (cursors.right.isDown) {\n//     player.anims.play('character-walk-right', true);\n//   } else if (cursors.up.isDown) {\n//     player.anims.play('character-walk-up', true);\n//   } else if (cursors.down.isDown) {\n//     player.anims.play('character-walk-down', true);\n//   } else {\n//     player.anims.stop();\n//     // If we were moving, pick and idle frame to use\n//     if (prevVelocity.x < 0)\n//       player.setTexture('atlas', 'Character_Left.000.png');\n//     else if (prevVelocity.x > 0)\n//       player.setTexture('atlas', 'Character_Right.000.png');\n//     else if (prevVelocity.y < 0)\n//       player.setTexture('atlas', 'Character_Up.000.png');\n//     else if (prevVelocity.y > 0)\n//       player.setTexture('atlas', 'Character_Down.000.png');\n//   }\n// }","export default class Player {\n  constructor(scene, x, y) {\n    this.scene = scene;\n    const anims = scene.anims;\n    anims.create({\n      key: 'character-walk-down',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Down.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-walk-left',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Left.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-walk-up',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Up.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-walk-right',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Right.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-slash-left',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashUpLeft.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-slash-right',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashDownRight.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-slash-down',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashDownLeft.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-slash-up',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashUpRight.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    this.sprite = scene.physics.add.sprite(x, y, 'atlas', 'Character_Down.000.png').setSize(32, 32);\n    this.sprite.anims.play('character-walk-down');\n    this.sprite.body.setVelocity(0);\n    this.keys = scene.input.keyboard.createCursorKeys();\n  }\n\n  freeze() {\n    this.sprite.body.moves = false;\n  }\n\n  update() {\n    const keys = this.keys;\n    const sprite = this.sprite;\n    const speed = 300;\n    const prevVelocity = sprite.body.velocity.clone();\n    sprite.body.setVelocity(0);\n\n    if (keys.left.isDown) {\n      sprite.body.setVelocityX(-speed);\n    } else if (keys.right.isDown) {\n      sprite.body.setVelocityX(speed);\n    } // Vertical movement\n\n\n    if (keys.up.isDown) {\n      sprite.body.setVelocityY(-speed);\n    } else if (keys.down.isDown) {\n      sprite.body.setVelocityY(speed);\n    } // Normalize and scale the velocity so that player can't move faster along a diagonal\n\n\n    sprite.body.velocity.normalize().scale(speed); // Update the animation last and give left/right animations precedence over up/down animations\n\n    if (keys.left.isDown) {\n      sprite.anims.play('character-walk-left', true);\n    } else if (keys.right.isDown) {\n      sprite.anims.play('character-walk-right', true);\n    } else if (keys.up.isDown) {\n      sprite.anims.play('character-walk-up', true);\n    } else if (keys.down.isDown) {\n      sprite.anims.play('character-walk-down', true);\n    } else {\n      sprite.anims.stop(); // If we were moving, pick and idle frame to use\n\n      if (prevVelocity.x < 0) sprite.setTexture('atlas', 'Character_Left.000.png');else if (prevVelocity.x > 0) sprite.setTexture('atlas', 'Character_Right.000.png');else if (prevVelocity.y < 0) sprite.setTexture('atlas', 'Character_Up.000.png');else if (prevVelocity.y > 0) sprite.setTexture('atlas', 'Character_Down.000.png');\n    }\n  }\n\n  destroy() {\n    this.sprite.destroy();\n  }\n\n}","import Player from '../player.js';\nexport default class TownScene extends Phaser.Scene {\n  constructor() {\n    super();\n  }\n\n  preload() {\n    this.load.image('tiles', './assets/magecity.png');\n    this.load.tilemapTiledJSON('map', './assets/mage-map.json'); // this.load.atlas(\n    //   'weapon',\n    //   '../assets/weapon-anims.png',\n    //   '../assets/weapon-anims.json'\n    // );\n    // An atlas is a way to pack multiple images together into one texture. I'm using it to load all\n    // the player animations (walking left, walking right, etc.) in one image. For more info see:\n    //  https://labs.phaser.io/view.html?src=src/animation/texture%20atlas%20animation.js\n    // If you don't use an atlas, you can do the same thing with a spritesheet, see:\n    //  https://labs.phaser.io/view.html?src=src/animation/single%20sprite%20sheet.js\n\n    this.load.atlas('atlas', '../assets/player-anim.png', '../assets/player-anim.json');\n  }\n\n  create() {\n    const map = this.make.tilemap({\n      key: 'map'\n    }); // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in\n    // Phaser's cache (i.e. the name you used in preload)\n\n    const tileset = map.addTilesetImage('mage-tileset', 'tiles'); // Parameters: layer name (or index) from Tiled, tileset, x, y\n\n    const belowLayer = map.createStaticLayer('Below Player', tileset, 0, 0);\n    const worldLayer = map.createStaticLayer('World', tileset, 0, 0);\n    const aboveLayer = map.createStaticLayer('Above Player', tileset, 0, 0);\n    worldLayer.setCollisionByProperty({\n      collides: true\n    }); // By default, everything gets depth sorted on the screen in the order we created things. Here, we\n    // want the \"Above Player\" layer to sit on top of the player, so we explicitly give it a depth.\n    // Higher depths will sit on top of lower depth objects.\n\n    aboveLayer.setDepth(10);\n    const spawnPoint = map.findObject('Objects', obj => obj.name === 'Spawn Point');\n    this.player = new Player(this, spawnPoint.x, spawnPoint.y);\n    this.physics.add.collider(this.player.sprite, worldLayer);\n    const camera = this.cameras.main; // Debug graphics\n\n    this.input.keyboard.once('keydown_F', event => {\n      // Turn on physics debugging to show player's hitbox\n      this.physics.world.createDebugGraphic();\n      console.log(this.player, worldLayer); // Create worldLayer collision graphic above the player, but below the help text\n\n      const graphics = this.add.graphics().setAlpha(0.75).setDepth(20);\n      worldLayer.renderDebug(graphics, {\n        tileColor: null,\n        // Color of non-colliding tiles\n        collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n        // Color of colliding tiles\n        faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges\n\n      });\n    }); // Constrain the camera so that it isn't allowed to move outside the width/height of tilemap\n\n    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n    camera.startFollow(this.player.sprite);\n  }\n\n  update(time, delta) {\n    this.player.update();\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9UA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxJA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}