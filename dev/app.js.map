{"version":3,"file":"app.js","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/main.js","webpack://[name]/./src/player/player.js","webpack://[name]/./src/scenes/ArenaScene.js","webpack://[name]/./src/scenes/BootScene.js","webpack://[name]/./src/scenes/TitleScene.js","webpack://[name]/./src/scenes/TownScene.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"app\"] = factory();\n\telse\n\t\troot[\"app\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dev/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import BootScene from './scenes/BootScene.js';\nimport TitleScene from './scenes/TitleScene.js';\nimport TownScene from './scenes/TownScene.js';\nimport ArenaScene from './scenes/ArenaScene.js';\nconst config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: 'game-container',\n  pixelArt: true,\n  scene: [BootScene, TitleScene, TownScene, ArenaScene],\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: {\n        y: 0\n      }\n    }\n  }\n};\nconst game = new Phaser.Game(config);","export default class Player {\n  constructor(scene, x, y) {\n    this.scene = scene;\n    const anims = scene.anims;\n    anims.create({\n      key: 'character-walk-down',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Down.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-walk-left',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Left.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-walk-up',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Up.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-walk-right',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_Right.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'character-slash-left',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashUpLeft.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 15,\n      repeat: 0\n    });\n    anims.create({\n      key: 'character-slash-right',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashDownRight.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 15,\n      repeat: 0\n    });\n    anims.create({\n      key: 'character-slash-down',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashDownLeft.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 15,\n      repeat: 0\n    });\n    anims.create({\n      key: 'character-slash-up',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'Character_SlashUpRight.',\n        start: 0,\n        end: 4,\n        zeroPad: 3,\n        suffix: '.png'\n      }),\n      frameRate: 15,\n      repeat: 0\n    });\n    this.sprite = scene.physics.add.sprite(x, y, 'atlas', 'Character_Down.000.png').setSize(32, 32);\n    this.sprite.setScale(1.4);\n    this.sprite.anims.play('character-walk-down');\n    this.sprite.body.setVelocity(0);\n    this.keys = scene.input.keyboard.createCursorKeys();\n    this.attackKey = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n  }\n\n  freeze() {\n    this.sprite.body.moves = false;\n  }\n\n  update() {\n    const keys = this.keys;\n    const sprite = this.sprite;\n    const speed = 300;\n    const prevVelocity = sprite.body.velocity.clone();\n    sprite.body.setVelocity(0); // Horizontal movement\n\n    if (keys.left.isDown) {\n      sprite.body.setVelocityX(-speed);\n    }\n\n    if (keys.right.isDown) {\n      sprite.body.setVelocityX(speed);\n    } // Vertical movement\n\n\n    if (keys.up.isDown) {\n      sprite.body.setVelocityY(-speed);\n    }\n\n    if (keys.down.isDown) {\n      sprite.body.setVelocityY(speed);\n    } // Normalize and scale the velocity so that player can't move faster along a diagonal\n\n\n    sprite.body.velocity.normalize().scale(speed); // Update the animation last and give left/right animations precedence over up/down animations\n\n    if (this.attackKey.isDown) {\n      this.attack();\n    } else if (keys.left.isDown) {\n      this.playAnim('character-walk-left');\n    } else if (keys.right.isDown) {\n      this.playAnim('character-walk-right');\n    } else if (keys.up.isDown) {\n      this.playAnim('character-walk-up');\n    } else if (keys.down.isDown) {\n      this.playAnim('character-walk-down');\n    } else {\n      this.idle();\n    }\n  } //player functions\n  // becomeIdle(prevVelocity) {\n  //   this.sprite.anims.stop();\n  //   // If we were moving, pick and idle frame to use\n  //   if (prevVelocity.x < 0)\n  //     this.sprite.setTexture('atlas', 'Character_Left.000.png');\n  //   else if (prevVelocity.x > 0)\n  //     this.sprite.setTexture('atlas', 'Character_Right.000.png');\n  //   else if (prevVelocity.y < 0)\n  //     this.sprite.setTexture('atlas', 'Character_Up.000.png');\n  //   else if (prevVelocity.y > 0)\n  //     this.sprite.setTexture('atlas', 'Character_Down.000.png');\n  // }\n\n\n  destroy() {\n    this.sprite.destroy();\n  }\n\n  playAnim(key) {\n    this.sprite.anims.play(key, true);\n  }\n\n  playAttack(key) {\n    const anims = this.sprite.anims;\n    anims.play(key, true); // this.sprite.anims.play('isLast', () => {\n    //   console.log('animation complete');\n    // });\n  }\n\n  attack() {\n    //Prevents player from moving during attack anim\n    this.sprite.body.setVelocity(0);\n\n    if (this.sprite.body.facing === 13) {\n      this.playAttack('character-slash-left');\n    } else if (this.sprite.body.facing === 14) {\n      this.playAttack('character-slash-right');\n    } else if (this.sprite.body.facing === 11) {\n      this.playAttack('character-slash-up');\n    } else if (this.sprite.body.facing === 12) {\n      this.playAttack('character-slash-down');\n    }\n  }\n\n  idle() {\n    this.sprite.anims.stop(); // If we were moving, pick an idle frame to use\n\n    if (this.sprite.body.facing === 13) this.sprite.setTexture('atlas', 'Character_Left.000.png');else if (this.sprite.body.facing === 14) this.sprite.setTexture('atlas', 'Character_Right.000.png');else if (this.sprite.body.facing === 11) this.sprite.setTexture('atlas', 'Character_Up.000.png');else if (this.sprite.body.facing === 12) this.sprite.setTexture('atlas', 'Character_Down.000.png');\n  }\n\n}","import Player from '../player/player.js';\nexport default class TownScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'ArenaScene'\n    });\n  }\n\n  preload() {}\n\n  create() {\n    const map = this.make.tilemap({\n      key: 'arenamap'\n    }); // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in\n    // Phaser's cache (i.e. the name you used in preload)\n\n    const tileset = map.addTilesetImage('mage-tileset', 'tiles'); // Parameters: layer name (or index) from Tiled, tileset, x, y\n\n    const belowLayer = map.createStaticLayer('Below Player', tileset, 0, 0);\n    const worldLayer = map.createStaticLayer('World', tileset, 0, 0);\n    const aboveLayer = map.createStaticLayer('Above Player', tileset, 0, 0);\n    worldLayer.setCollisionByProperty({\n      collides: true\n    }); // By default, everything gets depth sorted on the screen in the order we created things. Here, we\n    // want the \"Above Player\" layer to sit on top of the player, so we explicitly give it a depth.\n    // Higher depths will sit on top of lower depth objects.\n\n    aboveLayer.setDepth(10);\n    const spawnPoint = map.findObject('Objects', obj => obj.name === 'Spawn Point');\n    this.player = new Player(this, spawnPoint.x, spawnPoint.y);\n    this.physics.add.collider(this.player.sprite, worldLayer);\n    const camera = this.cameras.main; // Debug graphics\n\n    this.input.keyboard.once('keydown_F', event => {\n      // Turn on physics debugging to show player's hitbox\n      this.physics.world.createDebugGraphic();\n      console.log(this.player, worldLayer); // Create worldLayer collision graphic above the player, but below the help text\n\n      const graphics = this.add.graphics().setAlpha(0.75).setDepth(20);\n      worldLayer.renderDebug(graphics, {\n        tileColor: null,\n        // Color of non-colliding tiles\n        collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n        // Color of colliding tiles\n        faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges\n\n      });\n    }); //Callback when player collides with door\n\n    worldLayer.setTileIndexCallback(307, () => {\n      worldLayer.setTileIndexCallback(200, null);\n      this.playerHasReachedDoor = false;\n      console.log('farts');\n      this.scene.stop('ArenaScene');\n      this.scene.start('TownScene');\n    }); //Save for scene switch debugging\n\n    this.input.keyboard.once('keydown_D', event => {// this.scene.stop('ArenaScene');\n      // this.scene.start('TownScene');\n    }); // Create HUD\n\n    this.createHUD(); // Constrain the camera so that it isn't allowed to move outside the width/height of tilemap\n\n    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n    camera.startFollow(this.player.sprite);\n  }\n\n  update(time, delta) {\n    this.player.update();\n  }\n\n  createHUD() {\n    var rect = new Phaser.Geom.Rectangle(5, 5, 58, 28);\n    var graphics = this.add.graphics({\n      fillStyle: {\n        color: 0x0000ff,\n        alpha: 0.35\n      }\n    });\n    graphics.fillRectShape(rect);\n    graphics.setScrollFactor(0, 0);\n    const hud = this.add.bitmapText(10, 10, 'font', 'HEALTH', 8);\n    hud.setScrollFactor(0, 0);\n    this.health = {\n      pts: 0,\n      textObject: this.add.bitmapText(10, 20, 'font', '100', 8)\n    };\n    this.health.textObject.setScrollFactor(0, 0);\n  }\n\n}","class BootScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'BootScene'\n    });\n  }\n\n  preload() {\n    const progress = this.add.graphics(); // Register a load progress event to show a load bar\n\n    this.load.on('progress', value => {\n      progress.clear();\n      progress.fillStyle(0xffffff, 1);\n      progress.fillRect(0, this.sys.game.config.height / 2, this.sys.game.config.width * value, 60);\n    }); // Register a load complete event to launch the title screen when all files are loaded\n\n    this.load.on('complete', () => {\n      // prepare all animations, defined in a separate file\n      progress.destroy();\n      console.log('complete');\n      this.scene.start('TitleScene');\n    }); //Loading assets for Town Scene\n\n    this.load.image('tiles', './assets/magecity.png');\n    this.load.tilemapTiledJSON('map', './assets/town-scene.json');\n    this.load.tilemapTiledJSON('arenamap', './assets/Arena.json'); //Loading assets for players animations\n\n    this.load.atlas('atlas', '../assets/player-anim.png', '../assets/player-anim.json'); //Loading assets for title screen && HUD\n\n    this.load.bitmapFont('font', 'assets/fonts/font.png', 'assets/fonts/font.fnt');\n  }\n\n}\n\nexport default BootScene;","class TitleScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'TitleScene'\n    });\n  }\n\n  preload() {}\n\n  create() {\n    this.scene.bringToTop();\n    this.registry.set('restartScene', false);\n    this.registry.set('attractMode', true);\n    this.title = this.add.bitmapText(340, 250, 'font', 'GLADIATORS', 12);\n    this.pressX = this.add.bitmapText(305, 270, 'font', 'PRESS X TO START', 12);\n    this.blink = 1000;\n    this.startKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.X);\n  }\n\n  update(time, delta) {\n    if (this.registry.get('restartScene')) {\n      this.restartScene();\n    }\n\n    this.blink -= delta;\n\n    if (this.blink < 0) {\n      this.pressX.alpha = this.pressX.alpha === 1 ? 0 : 1;\n      this.blink = 500;\n    }\n\n    if (this.startKey.isDown) {\n      this.startGame();\n    }\n  }\n\n  startGame() {\n    this.scene.stop('TownScene');\n    this.scene.start('TownScene');\n  }\n\n  restartScene() {\n    this.scene.stop('TownScene');\n    this.scene.launch('TownScene');\n    this.scene.bringToTop();\n    this.registry.set('restartScene', false);\n  }\n\n}\n\nexport default TitleScene;","import Player from '../player/player.js';\nexport default class TownScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'TownScene'\n    });\n  }\n\n  preload() {}\n\n  create() {\n    this.playerHasReachedDoor = false;\n    const map = this.make.tilemap({\n      key: 'map'\n    }); // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in\n    // Phaser's cache (i.e. the name you used in preload)\n\n    const tileset = map.addTilesetImage('mage-tileset', 'tiles'); // Parameters: layer name (or index) from Tiled, tileset, x, y\n\n    const belowLayer = map.createDynamicLayer('Below Player', tileset, 0, 0);\n    const worldLayer = map.createDynamicLayer('World', tileset, 0, 0);\n    const aboveLayer = map.createDynamicLayer('Above Player', tileset, 0, 0);\n    worldLayer.setCollisionByProperty({\n      collides: true\n    }); // By default, everything gets depth sorted on the screen in the order we created things. Here, we\n    // want the \"Above Player\" layer to sit on top of the player, so we explicitly give it a depth.\n    // Higher depths will sit on top of lower depth objects.\n\n    aboveLayer.setDepth(10);\n    const spawnPoint = map.findObject('Objects', obj => obj.name === 'Spawn Point');\n    this.player = new Player(this, spawnPoint.x, spawnPoint.y);\n    this.physics.add.collider(this.player.sprite, worldLayer);\n    const camera = this.cameras.main; // Debug graphics\n\n    this.input.keyboard.once('keydown_F', event => {\n      // Turn on physics debugging to show player's hitbox\n      this.physics.world.createDebugGraphic();\n      console.log(this.player, worldLayer); // Create worldLayer collision graphic above the player, but below the help text\n\n      const graphics = this.add.graphics().setAlpha(0.75).setDepth(20);\n      worldLayer.renderDebug(graphics, {\n        tileColor: null,\n        // Color of non-colliding tiles\n        collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),\n        // Color of colliding tiles\n        faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges\n\n      });\n    }); //Debugging for scene switching\n\n    this.input.keyboard.once('keydown_D', () => {\n      // this.scene.stop('TownScene');\n      // this.scene.start('ArenaScene');\n      console.log(this.player.sprite.x);\n    }); //Callback when player collides with door\n\n    worldLayer.setTileIndexCallback([327], () => {\n      worldLayer.setTileIndexCallback(200, null);\n      this.playerHasReachedDoor = true;\n      console.log('farts');\n      camera.fade(250, 0, 0, 0);\n      camera.once('camerafadeoutcomplete', () => {\n        this.scene.stop('TownScene');\n        this.scene.start('ArenaScene');\n      });\n    }); // Create HUD\n\n    this.createHUD(); // Constrain the camera so that it isn't allowed to move outside the width/height of tilemap\n\n    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n    camera.startFollow(this.player.sprite);\n  }\n\n  update(time, delta) {\n    if (this.playerHasReachedDoor) return;\n    this.player.update();\n  }\n\n  createHUD() {\n    var rect = new Phaser.Geom.Rectangle(5, 5, 58, 28);\n    var graphics = this.add.graphics({\n      fillStyle: {\n        color: 0x0000ff,\n        alpha: 0.35\n      }\n    });\n    graphics.fillRectShape(rect);\n    graphics.setScrollFactor(0, 0);\n    const hud = this.add.bitmapText(10, 10, 'font', 'HEALTH', 8);\n    hud.setScrollFactor(0, 0);\n    this.health = {\n      pts: 0,\n      textObject: this.add.bitmapText(10, 20, 'font', '100', 8)\n    };\n    this.health.textObject.setScrollFactor(0, 0);\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACplCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClsourceRoot":""}